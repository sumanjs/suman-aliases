{
  "_args": [
    [
      {
        "raw": "siamese@latest",
        "scope": null,
        "escapedName": "siamese",
        "name": "siamese",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-aliases/projects/suman/node_modules/suman"
    ]
  ],
  "_from": "siamese@latest",
  "_id": "siamese@2.0.7",
  "_inCache": true,
  "_location": "/siamese",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/siamese-2.0.7.tgz_1511898939806_0.6109653392340988"
  },
  "_npmUser": {
    "name": "denmanm1",
    "email": "alex@oresoftware.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "siamese@latest",
    "scope": null,
    "escapedName": "siamese",
    "name": "siamese",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/suman"
  ],
  "_resolved": "https://registry.npmjs.org/siamese/-/siamese-2.0.7.tgz",
  "_shasum": "2fb547cb43245e3808def69c94eb597fd6ce201b",
  "_shrinkwrap": null,
  "_spec": "siamese@latest",
  "_where": "/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-aliases/projects/suman/node_modules/suman",
  "author": {
    "name": "Olegzandr VD"
  },
  "bugs": {
    "url": "https://github.com/the1mills/siamese/issues"
  },
  "dependencies": {},
  "description": "Promisifies JSON parse and stringify + makes them idempotent like we wish they would be.",
  "devDependencies": {
    "@types/core-js": "^0.9.43",
    "@types/node": "^8.0.53"
  },
  "directories": {},
  "dist": {
    "shasum": "2fb547cb43245e3808def69c94eb597fd6ce201b",
    "tarball": "https://registry.npmjs.org/siamese/-/siamese-2.0.7.tgz"
  },
  "gitHead": "c0b4e29b2652da3f14fc875a10073300cc9a599e",
  "homepage": "https://github.com/the1mills/siamese#readme",
  "keywords": [
    "promises",
    "JSON",
    "idempotent",
    "IJSON",
    "idempotent-json"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "denmanm1",
      "email": "alex@oresoftware.com"
    }
  ],
  "name": "siamese",
  "optionalDependencies": {},
  "readme": "\n\n# Siamese = Idempotent JSON + Promisification\n\n\n## Installation\n\n```bash\n $ npm install siamese -S\n```\n\n# Purpose\n\n1. <b>Prevent yak shaving</b> - stop <i>worrying</i> about whether what your parsing is already parsed.\n2. <b>Avoid try/catch</b> - we have promisified JSON.parse()/JSON.stringify - so no more try/catch needed. \n\n\n## Basic usage\n\n```js \nconst siam = global.siam = require('siamese');  // you have the choice whether it's global or not\n\n```\n\nThis library provides two primary features that I believe are unfortunately missing from the JSON spec\n\n1 => Idempotence =>\n\n* If you parse something twice, it shouldn't throw an error, it should just return what you gave it\n* If you stringify something twice, or thrice, etc, it shouldn't keep stringifying, and accumulating endless escape characters in the process\n\n2 => Error handling and flow control with ES6 Promises =>\n\n* Promises do synchronous error-handling out-of-the-box (just don't forget the rejection handler or catch block)\n* We can pass promises to siam.parse() and siam.stringify() and it can parse/stringify the resolution of the promise\n\n\n## Usage\n\n```js\n\n // won't throw an error, even though we passed it a plain object\n \nsiam.parse({foo:'bar'}).then(function(val){  \n    console.log(val);  // =>  {foo:'bar'}\n})\n.catch(function(err){\n     //nope\n});\n\n\n// you can pass it a promise like so:\n\nsiam.parse(new Promise((resolve) => resolve({foo:'bar'})))\n.then(function(val){\n\n})\n.catch(function(err){\n\n});\n\n\n// since siam.parse and siam.stringify return promises you can do this if you really want to\n\nPromise.all([\n    siam.parse(x),\n    siam.parse(y),\n    siam.stringify(z)\n])\n\n// and since siam.parse and siam.stringify accept promises as arguments, you can do\n\nsiam.parse(siam.stringify(siam.stringify(siam.stringify({foo:'bar'})))).then(function(val){\n    console.log(val);\n});\n\n\n// and since these functions are now idempotent, the final result of the above is:\n\n\n{foo:'bar'}\n```\n\n### voil√† !\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/the1mills/siamese.git"
  },
  "scripts": {
    "test": "suman test"
  },
  "types": "index.d.ts",
  "typings": "index.d.ts",
  "version": "2.0.7"
}
