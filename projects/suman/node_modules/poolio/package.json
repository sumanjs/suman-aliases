{
  "_args": [
    [
      {
        "raw": "poolio@latest",
        "scope": null,
        "escapedName": "poolio",
        "name": "poolio",
        "rawSpec": "latest",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-aliases/projects/suman/node_modules/suman-watch"
    ]
  ],
  "_from": "poolio@latest",
  "_id": "poolio@0.2.54014",
  "_inCache": true,
  "_location": "/poolio",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/poolio-0.2.54014.tgz_1509921651800_0.30098193418234587"
  },
  "_npmUser": {
    "name": "oresoftware",
    "email": "alex@oresoftware.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "poolio@latest",
    "scope": null,
    "escapedName": "poolio",
    "name": "poolio",
    "rawSpec": "latest",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/suman-watch"
  ],
  "_resolved": "https://registry.npmjs.org/poolio/-/poolio-0.2.54014.tgz",
  "_shasum": "8b126cfe7e73ee7e2701ceb6d1ec6ac172fa6c6a",
  "_shrinkwrap": null,
  "_spec": "poolio@latest",
  "_where": "/Users/alexamil/WebstormProjects/oresoftware/sumanjs/suman-aliases/projects/suman/node_modules/suman-watch",
  "author": {
    "name": "Olegzandr VD"
  },
  "bugs": {
    "url": "https://github.com/oresoftware/poolio/issues"
  },
  "dependencies": {
    "chalk": "^1.1.3",
    "debug": "^2.2.0",
    "residence": "latest"
  },
  "description": "Create a versatile pool of child process workers.",
  "devDependencies": {
    "@types/async": "^2.0.40",
    "@types/chalk": "^0.4.31",
    "@types/node": "^8.0.3",
    "async": "2.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8b126cfe7e73ee7e2701ceb6d1ec6ac172fa6c6a",
    "tarball": "https://registry.npmjs.org/poolio/-/poolio-0.2.54014.tgz"
  },
  "gitHead": "e399cc7d55bfb232f9d3965ba42ad06f454771eb",
  "homepage": "https://github.com/oresoftware/poolio#readme",
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "oresoftware",
      "email": "alex@oresoftware.com"
    }
  ],
  "name": "poolio",
  "optionalDependencies": {},
  "readme": "# Poolio\n\n[![Build Status](https://travis-ci.org/ORESoftware/poolio.svg?branch=master)](https://travis-ci.org/ORESoftware/poolio)\n\n\n##  => a versatile process pool for Node.js\n\n* create a pool of N workers\n* define the start script for each worker in the pool\n* kill workers after each task and automatically generate a new worker on exit, or more likely, reuse the same\nworkers for the lifecycle of the worker pool.\n* dynamically add or remove workers at will\n\n<br>\n<br>\n\n<a href=\"https://nodei.co/npm/poolio/\"><img src=\"https://nodei.co/npm/poolio.png?downloads=true&downloadRank=true&stars=true\"></a>\n\n<br>\n<br>\n\nThis module behaves much like these two pre-existing modules:\n\n* core: https://nodejs.org/api/cluster.html#cluster_cluster_setupmaster_settings\n* userland: https://github.com/thisandagain/fork-pool\n\nThis module strives for a better implementation and simpler API. Like the above,\nthis lib utilizes a child_process pool, using child_process.fork() like so: \n\n\n```javascript\n\nconst cp = require('child_process');\nconst n = cp.spawn('node',['<your-worker-script>']);\n\n```\n\nas per:\n\nhttps://nodejs.org/api/child_process.html\n\n\n## Installation\n\n```bash\nnpm install -S poolio\n```\n\n## Basic Use\n\n```js\n\n// in the parent process, we require the module and initialize a pool\n\nconst {Pool} = require('poolio');\n\nconst pool = new Pool({\n    filePath: 'child.js',    //path is relative to root of your project, but it's best to pass in an absolute path\n    size: 3\n});\n\n\nfunction rankPostsUsingWorkerPool(postIds, cb){\n\n    pool.any({action: 'run', posts: postIds}).then(function resolved(posts) {\n        cb(null, posts);\n    }, function rejected(e) {\n        cb(e, []);              //pro-tip, use the rejected handler instead of the catch block, to ensure cb only gets called once\n    }).catch(function (err) {\n        log.error(err);\n    });\n    \n}\n       \n\n// in a child process - simple example\n\nprocess.on('message', function (data) {   //use the closure, it is better that way\n\n    const workId = data.workId;\n    \n    var result;\n    \n    try{\n    \n     result = doSomeIntensiveWork();\n     \n     process.send({\n        msg: 'done/return/to/pool',\n        error: null,\n        workId: workId,\n        result: result\n     });\n     \n    }\n    catch(err){\n        process.send({\n            msg: 'error',\n            error: err.stack,\n            workId: workId,\n            result: null\n         });\n    }\n    \n    \n    \n    function doSomeIntensiveWork(){\n    \n       // ....\n    \n        return 'some-very-special-result';\n    \n    }\n    \n    \n});\n\n\n```\n\n## Advanced use\n\n```js\n\n// in the parent process, we require the module and initialize a pool\n\nconst Pool = require('poolio');\n\nconst pool = new Pool({\n    filePath: 'child.js',    //path is relative to root of your project\n    size: 5\n});\n\n\nfunction doHeavyDataIntensiveAsyncWork(data){\n    return pool.any({action: 'all', data: data}); // return the promise\n}\n       \n\n// in a child process - advanced example\n\nconst _ = require('lodash');\nconst domain = require('domain');\n\n\nprocess.on('message', function (data) {   //use the closure, it is better that way\n\n    const workId = data.workId;\n    const d = domain.create();\n    \n    d.once('error', function(err){\n       this.exit();\n       process.send({\n         msg: 'error',\n         error: err.stack,\n         workId: workId,\n         result: null\n       });\n    \n    });\n    \n    d.run(function(){\n    \n    const actions = [];\n    \n    switch(data.action){\n    \n         case 'foo':\n           actions.push(foo);\n           break;\n         case 'bar':\n           actions.push(bar);\n           break;\n         case 'baz';\n           actions.push(baz);\n           break;\n         case 'all':\n           actions.push(foo);\n           actions.push(bar);\n           actions.push(baz);\n           break;\n         default:\n           throw new Error('No case matched'); //will be caught by domain.on('error')\n    \n    }\n    \n    \n       Promise.all(actions).then(function(result){\n       \n           process.send({\n              msg: 'done/return/to/pool',\n              result: result,\n              workId: workId\n              error: null\n           });\n    \n       });\n    \n    \n    });\n    \n    function foo(){\n       \n       return new Promise(function(resolve,reject){\n       \n            // ....do some async work...\n        \n       })\n       \n    }\n    \n    \n    function bar(){\n    \n        return new Promise(function(resolve,reject){\n             \n            // ....do some async work...\n              \n        })\n    \n    }\n    \n    function baz(){\n    \n       return new Promise(function(resolve,reject){\n              \n           // ....do some async work...\n               \n       })\n    }\n    \n    \n});\n\n\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/oresoftware/poolio.git"
  },
  "scripts": {
    "test": "./âˆ†test.sh"
  },
  "types": "index.d.ts",
  "typings": "index.d.ts",
  "version": "0.2.54014"
}
